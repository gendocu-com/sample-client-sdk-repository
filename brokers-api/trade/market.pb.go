// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.9.1
// source: trade/market.proto

package trade

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FindSymbolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phrase string `protobuf:"bytes,1,opt,name=phrase,proto3" json:"phrase,omitempty"`
	Market string `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *FindSymbolRequest) Reset() {
	*x = FindSymbolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSymbolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSymbolRequest) ProtoMessage() {}

func (x *FindSymbolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSymbolRequest.ProtoReflect.Descriptor instead.
func (*FindSymbolRequest) Descriptor() ([]byte, []int) {
	return file_trade_market_proto_rawDescGZIP(), []int{0}
}

func (x *FindSymbolRequest) GetPhrase() string {
	if x != nil {
		return x.Phrase
	}
	return ""
}

func (x *FindSymbolRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

type FindSymbolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*SymbolProposition `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *FindSymbolResponse) Reset() {
	*x = FindSymbolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindSymbolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindSymbolResponse) ProtoMessage() {}

func (x *FindSymbolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindSymbolResponse.ProtoReflect.Descriptor instead.
func (*FindSymbolResponse) Descriptor() ([]byte, []int) {
	return file_trade_market_proto_rawDescGZIP(), []int{1}
}

func (x *FindSymbolResponse) GetResult() []*SymbolProposition {
	if x != nil {
		return x.Result
	}
	return nil
}

type SymbolProposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Ask    float32 `protobuf:"fixed32,2,opt,name=ask,proto3" json:"ask,omitempty"`
	Bid    float32 `protobuf:"fixed32,3,opt,name=bid,proto3" json:"bid,omitempty"`
}

func (x *SymbolProposition) Reset() {
	*x = SymbolProposition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolProposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolProposition) ProtoMessage() {}

func (x *SymbolProposition) ProtoReflect() protoreflect.Message {
	mi := &file_trade_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolProposition.ProtoReflect.Descriptor instead.
func (*SymbolProposition) Descriptor() ([]byte, []int) {
	return file_trade_market_proto_rawDescGZIP(), []int{2}
}

func (x *SymbolProposition) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SymbolProposition) GetAsk() float32 {
	if x != nil {
		return x.Ask
	}
	return 0
}

func (x *SymbolProposition) GetBid() float32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

type GetPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *GetPriceRequest) Reset() {
	*x = GetPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_market_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriceRequest) ProtoMessage() {}

func (x *GetPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_market_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriceRequest.ProtoReflect.Descriptor instead.
func (*GetPriceRequest) Descriptor() ([]byte, []int) {
	return file_trade_market_proto_rawDescGZIP(), []int{3}
}

func (x *GetPriceRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type GetPriceReponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string               `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Ask    float32              `protobuf:"fixed32,2,opt,name=ask,proto3" json:"ask,omitempty"`
	Bid    float32              `protobuf:"fixed32,3,opt,name=bid,proto3" json:"bid,omitempty"`
	Date   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GetPriceReponse) Reset() {
	*x = GetPriceReponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_market_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPriceReponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPriceReponse) ProtoMessage() {}

func (x *GetPriceReponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_market_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPriceReponse.ProtoReflect.Descriptor instead.
func (*GetPriceReponse) Descriptor() ([]byte, []int) {
	return file_trade_market_proto_rawDescGZIP(), []int{4}
}

func (x *GetPriceReponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetPriceReponse) GetAsk() float32 {
	if x != nil {
		return x.Ask
	}
	return 0
}

func (x *GetPriceReponse) GetBid() float32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *GetPriceReponse) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

var File_trade_market_proto protoreflect.FileDescriptor

var file_trade_market_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x11,
	0x46, 0x69, 0x6e, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x22, 0x46, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4f, 0x0a, 0x11, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x62, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x7d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x61,
	0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x62, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x32, 0x92, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x4d, 0x5a, 0x4b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x6e, 0x64, 0x6f, 0x63, 0x75, 0x2d,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x3b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trade_market_proto_rawDescOnce sync.Once
	file_trade_market_proto_rawDescData = file_trade_market_proto_rawDesc
)

func file_trade_market_proto_rawDescGZIP() []byte {
	file_trade_market_proto_rawDescOnce.Do(func() {
		file_trade_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_trade_market_proto_rawDescData)
	})
	return file_trade_market_proto_rawDescData
}

var file_trade_market_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_trade_market_proto_goTypes = []interface{}{
	(*FindSymbolRequest)(nil),   // 0: trade.FindSymbolRequest
	(*FindSymbolResponse)(nil),  // 1: trade.FindSymbolResponse
	(*SymbolProposition)(nil),   // 2: trade.SymbolProposition
	(*GetPriceRequest)(nil),     // 3: trade.GetPriceRequest
	(*GetPriceReponse)(nil),     // 4: trade.GetPriceReponse
	(*timestamp.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_trade_market_proto_depIdxs = []int32{
	2, // 0: trade.FindSymbolResponse.result:type_name -> trade.SymbolProposition
	5, // 1: trade.GetPriceReponse.date:type_name -> google.protobuf.Timestamp
	0, // 2: trade.MarketService.FindSymbol:input_type -> trade.FindSymbolRequest
	3, // 3: trade.MarketService.GetPrice:input_type -> trade.GetPriceRequest
	1, // 4: trade.MarketService.FindSymbol:output_type -> trade.FindSymbolResponse
	4, // 5: trade.MarketService.GetPrice:output_type -> trade.GetPriceReponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_trade_market_proto_init() }
func file_trade_market_proto_init() {
	if File_trade_market_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trade_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSymbolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_market_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindSymbolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_market_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolProposition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_market_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_market_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPriceReponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trade_market_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trade_market_proto_goTypes,
		DependencyIndexes: file_trade_market_proto_depIdxs,
		MessageInfos:      file_trade_market_proto_msgTypes,
	}.Build()
	File_trade_market_proto = out.File
	file_trade_market_proto_rawDesc = nil
	file_trade_market_proto_goTypes = nil
	file_trade_market_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MarketServiceClient is the client API for MarketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MarketServiceClient interface {
	//This method returns the stock symbol for given query.
	FindSymbol(ctx context.Context, in *FindSymbolRequest, opts ...grpc.CallOption) (*FindSymbolResponse, error)
	//This method returns price for given instrument. Those data might be delayed depending on account plan.
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceReponse, error)
}

type marketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketServiceClient(cc grpc.ClientConnInterface) MarketServiceClient {
	return &marketServiceClient{cc}
}

func (c *marketServiceClient) FindSymbol(ctx context.Context, in *FindSymbolRequest, opts ...grpc.CallOption) (*FindSymbolResponse, error) {
	out := new(FindSymbolResponse)
	err := c.cc.Invoke(ctx, "/trade.MarketService/FindSymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketServiceClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceReponse, error) {
	out := new(GetPriceReponse)
	err := c.cc.Invoke(ctx, "/trade.MarketService/GetPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketServiceServer is the server API for MarketService service.
type MarketServiceServer interface {
	//This method returns the stock symbol for given query.
	FindSymbol(context.Context, *FindSymbolRequest) (*FindSymbolResponse, error)
	//This method returns price for given instrument. Those data might be delayed depending on account plan.
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceReponse, error)
}

// UnimplementedMarketServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMarketServiceServer struct {
}

func (*UnimplementedMarketServiceServer) FindSymbol(context.Context, *FindSymbolRequest) (*FindSymbolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSymbol not implemented")
}
func (*UnimplementedMarketServiceServer) GetPrice(context.Context, *GetPriceRequest) (*GetPriceReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}

func RegisterMarketServiceServer(s *grpc.Server, srv MarketServiceServer) {
	s.RegisterService(&_MarketService_serviceDesc, srv)
}

func _MarketService_FindSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).FindSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trade.MarketService/FindSymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).FindSymbol(ctx, req.(*FindSymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketService_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketServiceServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trade.MarketService/GetPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketServiceServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MarketService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trade.MarketService",
	HandlerType: (*MarketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSymbol",
			Handler:    _MarketService_FindSymbol_Handler,
		},
		{
			MethodName: "GetPrice",
			Handler:    _MarketService_GetPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trade/market.proto",
}
